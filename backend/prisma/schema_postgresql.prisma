generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  email              String               @unique
  username           String               @unique
  passwordhash       Bytes
  salt               Bytes
  nickname           String?
  description        String?
  cover              String?
  avatar             String?
  usersetting        Usersetting?
  userswsubscription UserSwSubScription[]
  rotes              Rote[]
  attachments        Attachment[]
  openkey            UserOpenKey[]
  userreaction       UserReaction[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model UserSwSubScription {
  id             String   @id @default(uuid()) @db.Uuid
  user           User     @relation(fields: [userid], references: [id])
  userid         String   @db.Uuid
  endpoint       String   @unique
  expirationTime String?
  keys           Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Usersetting {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userid], references: [id])
  userid    String   @unique @db.Uuid
  darkmode  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOpenKey {
  id          String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userid], references: [id])
  userid      String   @db.Uuid
  permissions String[] @default(["SENDROTE"])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rote {
  id              String            @id @default(uuid()) @db.Uuid
  title           String?           @default("")
  type            String?           @default("Rote")
  tags            String[]          @default([])
  content         String
  state           String            @default("private")
  archived        Boolean?          @default(false)
  author          User              @relation(fields: [authorid], references: [id])
  authorid        String            @db.Uuid
  pin             Boolean           @default(false)
  editor          String?           @default("normal")
  attachments     Attachment[]
  userreaction    UserReaction[]
  visitorreaction VisitorReaction[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Attachment {
  id          String   @id @default(uuid()) @db.Uuid
  url         String
  compressUrl String?  @default("")
  userid      String?  @db.Uuid
  roteid      String?  @db.Uuid
  storage     String
  details     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userid], references: [id])
  rote        Rote?    @relation(fields: [roteid], references: [id])
}

model UserReaction {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  user      User     @relation(fields: [userid], references: [id])
  userid    String   @db.Uuid
  rote      Rote     @relation(fields: [roteid], references: [id])
  roteid    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitorReaction {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  rote      Rote     @relation(fields: [roteid], references: [id])
  roteid    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SystemSetting {
  id               String   @id
  webClientSetting Json
  storage          Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
