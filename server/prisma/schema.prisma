generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type SubScriptionKeys {
  auth   String
  p256dh String
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  email              String               @unique
  username           String               @unique
  passwordhash       Bytes
  salt               Bytes
  nickname           String?
  description        String?
  cover              String?
  avatar             String?
  usersetting        Usersetting?
  userswsubscription UserSwSubScription[]
  rotes              Rote[]
  attachments        Attachment[]
  openkey            UserOpenKey[]
  userreaction       Reaction[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model UserSwSubScription {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  user           User             @relation(fields: [userid], references: [id])
  userid         String           @db.ObjectId
  endpoint       String           @unique
  note           String?          @default("")
  status         String           @default("active")
  expirationTime String?
  keys           SubScriptionKeys
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Usersetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userid], references: [id])
  userid    String   @unique @db.ObjectId
  darkmode  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOpenKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userid], references: [id])
  userid      String   @db.ObjectId
  permissions String[] @default(["SENDROTE"])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rote {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String?      @default("")
  type        String?      @default("Rote")
  tags        String[]     @default([])
  content     String
  state       String       @default("private")
  archived    Boolean?     @default(false)
  author      User         @relation(fields: [authorid], references: [id])
  authorid    String       @db.ObjectId
  pin         Boolean      @default(false)
  editor      String?      @default("normal")
  attachments Attachment[]
  reactions   Reaction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Attachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  compressUrl String?  @default("")
  userid      String?  @db.ObjectId
  roteid      String?  @db.ObjectId
  storage     String
  details     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userid], references: [id])
  rote        Rote?    @relation(fields: [roteid], references: [id])
}

model Reaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String // 支持任意 Emoji 或反应类型字符串
  user        User?    @relation(fields: [userid], references: [id])
  userid      String?  @db.ObjectId
  visitorId   String? // 可以是 IP 地址、设备指纹或临时 ID
  visitorInfo Json? // 存储访客的额外信息（IP、User-Agent等）
  rote        Rote     @relation(fields: [roteid], references: [id])
  roteid      String   @db.ObjectId
  metadata    Json? // 可以存储额外的反应数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@unique([userid, visitorId, roteid, type], name: "unique_reaction")
  @@index([roteid, type]) // 便于查询某个 Rote 的特定类型反应
  @@index([userid]) // 便于查询用户的所有反应
  @@index([visitorId]) // 便于查询访客的所有反应
}

model Session {
  id        String   @id @map("_id")
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SystemSetting {
  id               String   @id @map("_id")
  webClientSetting Json
  storage          Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
